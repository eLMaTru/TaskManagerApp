@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Aplicación de Gestión de Tareas</h1>
    <div class="container mt-4">       <p>
        <a class="btn btn-primary" asp-area="#" asp-controller="Tasks" asp-action="">Go to Tasks</a>
    </p>

</div>
    <p class="lead">Un proyecto desarrollado para demostrar las capacidades de ASP.NET Core MVC.</p>
</div>

<div class="container mt-4">
    <h2>Resumen</h2>
    <p>Esta aplicación web MVC es un sistema de gestión de tareas que permite a los usuarios realizar operaciones básicas de CRUD (Crear, Leer, Actualizar y Eliminar) en una lista de tareas. Cada tarea consta de un título y una descripción que se almacenan en una base de datos PostgreSQL.</p>

    <h2>Características principales</h2>
    <ul>
        <li><strong>Ver todas las tareas:</strong> Los usuarios pueden visualizar todas las tareas en un formato estructurado de tabla.</li>
        <li><strong>Crear tarea:</strong> Agrega una nueva tarea con un título y descripción.</li>
        <li><strong>Editar tarea:</strong> Modifica las tareas existentes para actualizar su título o descripción.</li>
        <li><strong>Eliminar tarea:</strong> Elimina tareas de la base de datos con una confirmación previa.</li>
    </ul>

    <h2>Tecnologías utilizadas</h2>
    <ul>
        <li><strong>ASP.NET Core 7 MVC:</strong> Utilizado para estructurar la aplicación siguiendo el patrón Modelo-Vista-Controlador.</li>
        <li><strong>Entity Framework Core:</strong> ORM (Mapeo Objeto-Relacional) para operaciones con la base de datos.</li>
        <li><strong>PostgreSQL:</strong> Una base de datos relacional de código abierto potente para el almacenamiento de datos.</li>
        <li><strong>Bootstrap:</strong> Para un diseño moderno y adaptable en la interfaz de usuario.</li>
        <li><strong>Vistas Razor:</strong> Para generar contenido HTML dinámico y manejar la lógica de la interfaz.</li>
    </ul>

    <h2>Funcionamiento</h2>
    <h3>Base de datos:</h3>
    <p>La aplicación utiliza una tabla <code>Tasks</code> en una base de datos PostgreSQL. Esta tabla contiene las siguientes columnas:</p>
    <ul>
        <li><strong>Id:</strong> Clave primaria para identificar las tareas de forma única.</li>
        <li><strong>Título:</strong> Una breve descripción de la tarea.</li>
        <li><strong>Descripción:</strong> Información detallada sobre la tarea.</li>
    </ul>

    <h3>Controladores:</h3>
    <p>El controlador <code>TasksController</code> gestiona las solicitudes y coordina la comunicación entre la interfaz de usuario y la base de datos:</p>
    <ul>
        <li><strong>Index:</strong> Muestra todas las tareas.</li>
        <li><strong>Create:</strong> Añade una nueva tarea a la base de datos.</li>
        <li><strong>Edit:</strong> Actualiza la información de las tareas existentes.</li>
        <li><strong>Delete:</strong> Elimina una tarea de la base de datos.</li>
    </ul>

    <h3>Vistas:</h3>
    <p>Las vistas Razor ofrecen una interfaz de usuario limpia y adaptable para interactuar con la aplicación. Cada operación CRUD tiene su propia vista.</p>

    <h2>Propósito del proyecto</h2>
    <p>Este proyecto fue creado como parte de un curso de desarrollo de software para demostrar la integración de tecnologías web modernas utilizando ASP.NET Core MVC. Destaca el uso de:</p>
    <ul>
        <li>Integración de bases de datos con Entity Framework Core.</li>
        <li>Renderización de contenido dinámico con Razor Pages.</li>
        <li>Diseño adaptable con Bootstrap.</li>
    </ul>

    <h2>Cómo empezar</h2>
    <ol>
        <li>Navega a la página de tareas para ver todas las tareas disponibles.</li>
        <li>Utiliza el botón <strong>Crear</strong> para agregar una nueva tarea.</li>
        <li>Haz clic en <strong>Editar</strong> para modificar los detalles de una tarea.</li>
        <li>Haz clic en <strong>Eliminar</strong> para eliminar una tarea de forma permanente.</li>
    </ol>


 
</div>

